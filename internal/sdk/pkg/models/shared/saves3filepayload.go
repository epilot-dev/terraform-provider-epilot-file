// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-file/internal/sdk/pkg/utils"
)

type SaveS3FilePayloadAccessControl string

const (
	SaveS3FilePayloadAccessControlPrivate    SaveS3FilePayloadAccessControl = "private"
	SaveS3FilePayloadAccessControlPublicRead SaveS3FilePayloadAccessControl = "public-read"
)

func (e SaveS3FilePayloadAccessControl) ToPointer() *SaveS3FilePayloadAccessControl {
	return &e
}

func (e *SaveS3FilePayloadAccessControl) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private":
		fallthrough
	case "public-read":
		*e = SaveS3FilePayloadAccessControl(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SaveS3FilePayloadAccessControl: %v", v)
	}
}

type SaveS3FilePayloadDocumentType string

const (
	SaveS3FilePayloadDocumentTypeDocument         SaveS3FilePayloadDocumentType = "document"
	SaveS3FilePayloadDocumentTypeDocumentTemplate SaveS3FilePayloadDocumentType = "document_template"
	SaveS3FilePayloadDocumentTypeText             SaveS3FilePayloadDocumentType = "text"
	SaveS3FilePayloadDocumentTypeImage            SaveS3FilePayloadDocumentType = "image"
	SaveS3FilePayloadDocumentTypeVideo            SaveS3FilePayloadDocumentType = "video"
	SaveS3FilePayloadDocumentTypeAudio            SaveS3FilePayloadDocumentType = "audio"
	SaveS3FilePayloadDocumentTypeSpreadsheet      SaveS3FilePayloadDocumentType = "spreadsheet"
	SaveS3FilePayloadDocumentTypePresentation     SaveS3FilePayloadDocumentType = "presentation"
	SaveS3FilePayloadDocumentTypeFont             SaveS3FilePayloadDocumentType = "font"
	SaveS3FilePayloadDocumentTypeArchive          SaveS3FilePayloadDocumentType = "archive"
	SaveS3FilePayloadDocumentTypeApplication      SaveS3FilePayloadDocumentType = "application"
	SaveS3FilePayloadDocumentTypeUnknown          SaveS3FilePayloadDocumentType = "unknown"
)

func (e SaveS3FilePayloadDocumentType) ToPointer() *SaveS3FilePayloadDocumentType {
	return &e
}

func (e *SaveS3FilePayloadDocumentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "document":
		fallthrough
	case "document_template":
		fallthrough
	case "text":
		fallthrough
	case "image":
		fallthrough
	case "video":
		fallthrough
	case "audio":
		fallthrough
	case "spreadsheet":
		fallthrough
	case "presentation":
		fallthrough
	case "font":
		fallthrough
	case "archive":
		fallthrough
	case "application":
		fallthrough
	case "unknown":
		*e = SaveS3FilePayloadDocumentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SaveS3FilePayloadDocumentType: %v", v)
	}
}

type SaveS3FilePayload struct {
	AdditionalProperties interface{}                     `additionalProperties:"true" json:"-"`
	Tags                 []string                        `json:"_tags,omitempty"`
	AccessControl        *SaveS3FilePayloadAccessControl `default:"private" json:"access_control"`
	DocumentType         *SaveS3FilePayloadDocumentType  `json:"document_type,omitempty"`
	// if passed, adds a new version to existing file entity
	FileEntityID *string `json:"file_entity_id,omitempty"`
	Filename     *string `json:"filename,omitempty"`
	// List of entities to relate the file to
	Relations []FileRelationItem `json:"relations,omitempty"`
	S3ref     S3Reference        `json:"s3ref"`
}

func (s SaveS3FilePayload) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SaveS3FilePayload) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SaveS3FilePayload) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SaveS3FilePayload) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *SaveS3FilePayload) GetAccessControl() *SaveS3FilePayloadAccessControl {
	if o == nil {
		return nil
	}
	return o.AccessControl
}

func (o *SaveS3FilePayload) GetDocumentType() *SaveS3FilePayloadDocumentType {
	if o == nil {
		return nil
	}
	return o.DocumentType
}

func (o *SaveS3FilePayload) GetFileEntityID() *string {
	if o == nil {
		return nil
	}
	return o.FileEntityID
}

func (o *SaveS3FilePayload) GetFilename() *string {
	if o == nil {
		return nil
	}
	return o.Filename
}

func (o *SaveS3FilePayload) GetRelations() []FileRelationItem {
	if o == nil {
		return nil
	}
	return o.Relations
}

func (o *SaveS3FilePayload) GetS3ref() S3Reference {
	if o == nil {
		return S3Reference{}
	}
	return o.S3ref
}
