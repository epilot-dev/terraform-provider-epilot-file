// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-file/internal/sdk/pkg/utils"
	"time"
)

// ACL - Access control list for file entity (readonly)
type ACL struct {
	Delete []string `json:"delete,omitempty"`
	Edit   []string `json:"edit,omitempty"`
	View   []string `json:"view,omitempty"`
}

func (o *ACL) GetDelete() []string {
	if o == nil {
		return nil
	}
	return o.Delete
}

func (o *ACL) GetEdit() []string {
	if o == nil {
		return nil
	}
	return o.Edit
}

func (o *ACL) GetView() []string {
	if o == nil {
		return nil
	}
	return o.View
}

type Schema string

const (
	SchemaFile Schema = "file"
)

func (e Schema) ToPointer() *Schema {
	return &e
}

func (e *Schema) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "file":
		*e = Schema(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Schema: %v", v)
	}
}

type AccessControl string

const (
	AccessControlPrivate    AccessControl = "private"
	AccessControlPublicRead AccessControl = "public-read"
)

func (e AccessControl) ToPointer() *AccessControl {
	return &e
}

func (e *AccessControl) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private":
		fallthrough
	case "public-read":
		*e = AccessControl(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccessControl: %v", v)
	}
}

type FileEntity struct {
	// Access control list for file entity (readonly)
	ACL           *ACL           `json:"_acl,omitempty"`
	CreatedAt     *time.Time     `json:"_created_at,omitempty"`
	ID            string         `json:"_id"`
	Org           string         `json:"_org"`
	Schema        Schema         `json:"_schema"`
	Tags          []string       `json:"_tags,omitempty"`
	Title         string         `json:"_title"`
	UpdatedAt     *time.Time     `json:"_updated_at,omitempty"`
	AccessControl *AccessControl `default:"private" json:"access_control"`
	// Custom external download url used for the file
	CustomDownloadURL *string `json:"custom_download_url,omitempty"`
	Filename          string  `json:"filename"`
	// MIME type of the file
	MimeType *string `json:"mime_type,omitempty"`
	// Direct URL for file (public only if file access control is public-read)
	PublicURL *string `json:"public_url,omitempty"`
	// Human readable file size
	ReadableSize *string `json:"readable_size,omitempty"`
	S3ref        *S3Ref  `json:"s3ref,omitempty"`
	// File size in bytes
	SizeBytes *int64 `json:"size_bytes,omitempty"`
	// Source URL for the file. Included if the entity was created from source_url, or when ?source_url=true
	SourceURL *string    `json:"source_url,omitempty"`
	Type      FileType   `json:"type"`
	Versions  []FileItem `json:"versions"`
}

func (f FileEntity) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FileEntity) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *FileEntity) GetACL() *ACL {
	if o == nil {
		return nil
	}
	return o.ACL
}

func (o *FileEntity) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *FileEntity) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *FileEntity) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *FileEntity) GetSchema() Schema {
	if o == nil {
		return Schema("")
	}
	return o.Schema
}

func (o *FileEntity) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *FileEntity) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *FileEntity) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *FileEntity) GetAccessControl() *AccessControl {
	if o == nil {
		return nil
	}
	return o.AccessControl
}

func (o *FileEntity) GetCustomDownloadURL() *string {
	if o == nil {
		return nil
	}
	return o.CustomDownloadURL
}

func (o *FileEntity) GetFilename() string {
	if o == nil {
		return ""
	}
	return o.Filename
}

func (o *FileEntity) GetMimeType() *string {
	if o == nil {
		return nil
	}
	return o.MimeType
}

func (o *FileEntity) GetPublicURL() *string {
	if o == nil {
		return nil
	}
	return o.PublicURL
}

func (o *FileEntity) GetReadableSize() *string {
	if o == nil {
		return nil
	}
	return o.ReadableSize
}

func (o *FileEntity) GetS3ref() *S3Ref {
	if o == nil {
		return nil
	}
	return o.S3ref
}

func (o *FileEntity) GetSizeBytes() *int64 {
	if o == nil {
		return nil
	}
	return o.SizeBytes
}

func (o *FileEntity) GetSourceURL() *string {
	if o == nil {
		return nil
	}
	return o.SourceURL
}

func (o *FileEntity) GetType() FileType {
	if o == nil {
		return FileType("")
	}
	return o.Type
}

func (o *FileEntity) GetVersions() []FileItem {
	if o == nil {
		return []FileItem{}
	}
	return o.Versions
}
