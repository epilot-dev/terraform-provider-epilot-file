// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-file/internal/sdk/internal/utils"
)

type SaveCustomFilePayloadAccessControl string

const (
	SaveCustomFilePayloadAccessControlPrivate    SaveCustomFilePayloadAccessControl = "private"
	SaveCustomFilePayloadAccessControlPublicRead SaveCustomFilePayloadAccessControl = "public-read"
)

func (e SaveCustomFilePayloadAccessControl) ToPointer() *SaveCustomFilePayloadAccessControl {
	return &e
}
func (e *SaveCustomFilePayloadAccessControl) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private":
		fallthrough
	case "public-read":
		*e = SaveCustomFilePayloadAccessControl(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SaveCustomFilePayloadAccessControl: %v", v)
	}
}

type DocumentType string

const (
	DocumentTypeDocument         DocumentType = "document"
	DocumentTypeDocumentTemplate DocumentType = "document_template"
	DocumentTypeText             DocumentType = "text"
	DocumentTypeImage            DocumentType = "image"
	DocumentTypeVideo            DocumentType = "video"
	DocumentTypeAudio            DocumentType = "audio"
	DocumentTypeSpreadsheet      DocumentType = "spreadsheet"
	DocumentTypePresentation     DocumentType = "presentation"
	DocumentTypeFont             DocumentType = "font"
	DocumentTypeArchive          DocumentType = "archive"
	DocumentTypeApplication      DocumentType = "application"
	DocumentTypeUnknown          DocumentType = "unknown"
)

func (e DocumentType) ToPointer() *DocumentType {
	return &e
}
func (e *DocumentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "document":
		fallthrough
	case "document_template":
		fallthrough
	case "text":
		fallthrough
	case "image":
		fallthrough
	case "video":
		fallthrough
	case "audio":
		fallthrough
	case "spreadsheet":
		fallthrough
	case "presentation":
		fallthrough
	case "font":
		fallthrough
	case "archive":
		fallthrough
	case "application":
		fallthrough
	case "unknown":
		*e = DocumentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentType: %v", v)
	}
}

type SaveCustomFilePayload struct {
	AdditionalProperties any                                 `additionalProperties:"true" json:"-"`
	Tags                 []string                            `json:"_tags,omitempty"`
	AccessControl        *SaveCustomFilePayloadAccessControl `default:"private" json:"access_control"`
	// Custom external download url used for the file
	CustomDownloadURL string        `json:"custom_download_url"`
	DocumentType      *DocumentType `json:"document_type,omitempty"`
	// if passed, adds a new version to existing file entity
	FileEntityID *string `json:"file_entity_id,omitempty"`
	Filename     *string `json:"filename,omitempty"`
	// List of entities to relate the file to
	Relations []FileRelationItem `json:"relations,omitempty"`
}

func (s SaveCustomFilePayload) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SaveCustomFilePayload) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SaveCustomFilePayload) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SaveCustomFilePayload) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *SaveCustomFilePayload) GetAccessControl() *SaveCustomFilePayloadAccessControl {
	if o == nil {
		return nil
	}
	return o.AccessControl
}

func (o *SaveCustomFilePayload) GetCustomDownloadURL() string {
	if o == nil {
		return ""
	}
	return o.CustomDownloadURL
}

func (o *SaveCustomFilePayload) GetDocumentType() *DocumentType {
	if o == nil {
		return nil
	}
	return o.DocumentType
}

func (o *SaveCustomFilePayload) GetFileEntityID() *string {
	if o == nil {
		return nil
	}
	return o.FileEntityID
}

func (o *SaveCustomFilePayload) GetFilename() *string {
	if o == nil {
		return nil
	}
	return o.Filename
}

func (o *SaveCustomFilePayload) GetRelations() []FileRelationItem {
	if o == nil {
		return nil
	}
	return o.Relations
}
