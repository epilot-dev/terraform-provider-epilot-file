// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/epilot-dev/terraform-provider-epilot-file/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *FileResourceModel) ToSharedFileEntity() *shared.FileEntity {
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	accessControl := new(shared.AccessControl)
	if !r.AccessControl.IsUnknown() && !r.AccessControl.IsNull() {
		*accessControl = shared.AccessControl(r.AccessControl.ValueString())
	} else {
		accessControl = nil
	}
	filename := new(string)
	if !r.Filename.IsUnknown() && !r.Filename.IsNull() {
		*filename = r.Filename.ValueString()
	} else {
		filename = nil
	}
	mimeType := new(string)
	if !r.MimeType.IsUnknown() && !r.MimeType.IsNull() {
		*mimeType = r.MimeType.ValueString()
	} else {
		mimeType = nil
	}
	publicURL := new(string)
	if !r.PublicURL.IsUnknown() && !r.PublicURL.IsNull() {
		*publicURL = r.PublicURL.ValueString()
	} else {
		publicURL = nil
	}
	sizeBytes := new(int64)
	if !r.SizeBytes.IsUnknown() && !r.SizeBytes.IsNull() {
		*sizeBytes = r.SizeBytes.ValueInt64()
	} else {
		sizeBytes = nil
	}
	typeVar := new(shared.Type)
	if !r.Type.IsUnknown() && !r.Type.IsNull() {
		*typeVar = shared.Type(r.Type.ValueString())
	} else {
		typeVar = nil
	}
	var versions []shared.Versions = nil
	for _, versionsItem := range r.Versions {
		var s3ref *shared.S3Reference
		if versionsItem.S3ref != nil {
			bucket := versionsItem.S3ref.Bucket.ValueString()
			key := versionsItem.S3ref.Key.ValueString()
			s3ref = &shared.S3Reference{
				Bucket: bucket,
				Key:    key,
			}
		}
		versions = append(versions, shared.Versions{
			S3ref: s3ref,
		})
	}
	out := shared.FileEntity{
		ID:            id,
		AccessControl: accessControl,
		Filename:      filename,
		MimeType:      mimeType,
		PublicURL:     publicURL,
		SizeBytes:     sizeBytes,
		Type:          typeVar,
		Versions:      versions,
	}
	return &out
}

func (r *FileResourceModel) RefreshFromSharedFileEntity(resp *shared.FileEntity) {
	r.ID = types.StringPointerValue(resp.ID)
	if resp.AccessControl != nil {
		r.AccessControl = types.StringValue(string(*resp.AccessControl))
	} else {
		r.AccessControl = types.StringNull()
	}
	r.Filename = types.StringPointerValue(resp.Filename)
	r.MimeType = types.StringPointerValue(resp.MimeType)
	r.PublicURL = types.StringPointerValue(resp.PublicURL)
	r.SizeBytes = types.Int64PointerValue(resp.SizeBytes)
	if resp.Type != nil {
		r.Type = types.StringValue(string(*resp.Type))
	} else {
		r.Type = types.StringNull()
	}
	if len(r.Versions) > len(resp.Versions) {
		r.Versions = r.Versions[:len(resp.Versions)]
	}
	for versionsCount, versionsItem := range resp.Versions {
		var versions1 Versions
		if versionsItem.S3ref == nil {
			versions1.S3ref = nil
		} else {
			versions1.S3ref = &S3Reference{}
			versions1.S3ref.Bucket = types.StringValue(versionsItem.S3ref.Bucket)
			versions1.S3ref.Key = types.StringValue(versionsItem.S3ref.Key)
		}
		if versionsCount+1 > len(r.Versions) {
			r.Versions = append(r.Versions, versions1)
		} else {
			r.Versions[versionsCount].S3ref = versions1.S3ref
		}
	}
}
