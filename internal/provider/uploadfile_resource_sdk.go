// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-file/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-file/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *UploadFileResourceModel) ToSharedUploadFilePayload() *shared.UploadFilePayload {
	var filename string
	filename = r.Filename.ValueString()

	indexTag := new(string)
	if !r.IndexTag.IsUnknown() && !r.IndexTag.IsNull() {
		*indexTag = r.IndexTag.ValueString()
	} else {
		indexTag = nil
	}
	metadata := make(map[string]string)
	for metadataKey, metadataValue := range r.Metadata {
		var metadataInst string
		metadataInst = metadataValue.ValueString()

		metadata[metadataKey] = metadataInst
	}
	mimeType := new(string)
	if !r.MimeType.IsUnknown() && !r.MimeType.IsNull() {
		*mimeType = r.MimeType.ValueString()
	} else {
		mimeType = nil
	}
	out := shared.UploadFilePayload{
		Filename: filename,
		IndexTag: indexTag,
		Metadata: metadata,
		MimeType: mimeType,
	}
	return &out
}

func (r *UploadFileResourceModel) RefreshFromSharedFileUpload(resp *shared.FileUpload) {
	if resp != nil {
		r.PublicURL = types.StringPointerValue(resp.PublicURL)
		if resp.S3ref == nil {
			r.S3ref = nil
		} else {
			r.S3ref = &tfTypes.SaveFilePayloadV2S3ref{}
			r.S3ref.Bucket = types.StringValue(resp.S3ref.Bucket)
			r.S3ref.Key = types.StringValue(resp.S3ref.Key)
		}
		r.UploadURL = types.StringPointerValue(resp.UploadURL)
	}
}
